Matplotlib et Numpy en Python
===============================
Exemple 1
===============================
Executez le programme suivant.
===============================
from math import sqrt
import matplotlib.pyplot as plt
import numpy as np
from random import seed,randint

#?#############################

def lancerPiece():
    return randint(0,1)

def frequencePiles(n):
    total = 0.0
    for i in range(n):
        if lancerPiece() == 0:
            total += 1
    return total / n

###############################

N = 400     # taille des echantillons
p = 0.5     # probabilite

# cadrage du repere et legende
plt.xlim(0,100)
plt.ylim(0,1)
plt.xlabel("100 Échantillons")
plt.ylabel("Fréquence de Piles")
plt.grid()

# frequences des 100 echantillons
X = np.array( range(100) )
Y = np.array( [frequencePiles(N) for i in range(100)] )
plt.plot(X,Y, "o")

# bornes de l'intervalle de fluctuation (en rouge)
T = np.array([0, 100])
Z = np.array([p + 1/sqrt(N)] * 2)
plt.plot(T,Z, "r")
Z = np.array([p - 1/sqrt(N)] * 2)
plt.plot(T,Z, "r")
Z = np.array([p] * 2)
plt.plot(T,Z, "k--")

# affichage
plt.show()
===============================
[ [ "seed(1234)", "" ] ]
===============================
from math import sqrt
import matplotlib.pyplot as plt
import numpy as np
from random import seed,randint

#?#############################

def lancerPiece():
    return randint(0,1)

def frequencePiles(n):
    total = 0.0
    for i in range(n):
        if lancerPiece() == 0:
            total += 1
    return total / n

###############################

N = 400     # taille des echantillons
p = 0.5     # probabilite

# cadrage du repere et legende
plt.xlim(0,100)
plt.ylim(0,1)
plt.xlabel("100 Échantillons")
plt.ylabel("Fréquence de Piles")
plt.grid()

# frequences des 100 echantillons
X = np.array( range(100) )
Y = np.array( [frequencePiles(N) for i in range(100)] )
plt.plot(X,Y, "o")

# bornes de l'intervalle de fluctuation (en rouge)
T = np.array([0, 100])
Z = np.array([p + 1/sqrt(N)] * 2)
plt.plot(T,Z, "r")
Z = np.array([p - 1/sqrt(N)] * 2)
plt.plot(T,Z, "r")
Z = np.array([p] * 2)
plt.plot(T,Z, "k--")

# affichage
plt.show()

Programmation dynamique
===============================
Exercice 8
===============================
Créez la fonction <strong>max_1ou2(t)</strong> qui renvoie la plus grande valeur entre les éléments ou les sommes de deux éléments consécutifs du tableau d'entiers <strong>t</strong> contenant plus de 2 éléments. On pourra utiliser la fonction <strong>max()</strong> avec deux ou trois valeurs en arguments.<br>
Ainsi <strong>max_1ou2([-3,8,-7,2,4,1])</strong> renvoie <strong>8</strong> qui est le plus grand élément, alors que <strong>max_1ou2([-3,5,-7,2,4,1])</strong> renvoie <strong>6</strong> qui est la plus grande somme obtenue avec deux éléments consécutifs (2 et 4).
===============================
# Voici une solution

def max_1ou2(t):
    maximum = max(t[0], t[1], t[0]+t[1])
    for i in range(2, len(t)):
        m = max(t[i], t[i]+t[i-1])
        if m > maximum:
            maximum = m
    return maximum


#! exemple
print(max_1ou2([-3,8,-7,2,4,1]))
print(max_1ou2([-3,5,-7,2,4,1]))
===============================
[ ["[-3,8,-7,2,4,1]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"],
  ["[-3,5,-7,2,4,1]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"],
  ["[8,-1,-3,4,2,0]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"],
  ["[7,-5,1,3,-2,8]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"],
  ["[6,-1,-3,5,2,4]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"],
  ["[0,-1,-2,-3,-4]", "#!\nt=#?\ntry:\n    print(max_1ou2(t))\nexcept:\n    print('exception')"] ]
===============================
...



#! exemple
print(max_1ou2([-3,8,-7,2,4,1]))
print(max_1ou2([-3,5,-7,2,4,1]))
===============================
On parcourt les éléments du tableau <strong>t</strong> pour actualiser la valeur maximale trouvée jusque là, avec l'élément courant ou la somme des deux éléments consécutifs.
